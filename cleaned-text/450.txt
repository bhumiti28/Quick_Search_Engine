executor framework java javatpoint home java programs oops string regex exception multithreading collections jdbc swing javafx servlet jsp spring spring boot projects interview questions java training java tutorial what java history java features java c vs java hello java program program internal how set path jdk jre jvm jvm java virtual machine java variables java data types unicode system operators keywords control statements java ifelse java switch java loop java while loop java do while loop java break java continue java comments java programs java object class java oops concepts naming convention object class method constructor static keyword keyword java inheritance inheritanceisa aggregationhasa java polymorphism method overloading method overriding covariant return type super keyword instance initializer block final keyword runtime polymorphism dynamic binding instanceof operator java abstraction abstract class interface abstract vs interface java encapsulation package access modifiers encapsulation java array java array java oops misc object class object cloning math class wrapper class java recursion call value strictfp keyword javadoc tool command line arg object vs class overloading vs overriding java string java regex exception handling java inner classes java multithreading java io java networking java awt events java swing javafx java applet java reflection java date java conversion java collection java jdbc java misc java new features rmi internationalization interview questions java mcq next prev executor framework java framework bunch components used managing worker threads efficiently referred executor framework executor api reduces execution task actual task executed executors executor framework implementation producerconsumer pattern javautilconcurrentexecutors class provides set methods creating threadpools worker threads order use executor framework create thread pool executing task submitting task thread pool now question comes mind create thread pools already javalangthread class creating object runnablecallable interface achieving parallelism implementing so reason creating thread pools follows we need create large number threads adding new thread without throttling every process due requires memory cause wastage resource when thread swapped cpu starts spend much time when create new thread executing new task cause overhead thread creation order manage thread lifecycle execution time increase respectively types executors java different types executors available follows singlethreadexecutor singlethreadexecutor special type executor single thread used need execute tasks sequential order case thread dies due error exception time executing task new thread created subsequent tasks execute new one
