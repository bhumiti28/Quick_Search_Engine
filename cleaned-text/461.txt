delegation event model java javatpoint home java programs oops string regex exception multithreading collections jdbc swing javafx servlet jsp spring spring boot projects interview questions java training java tutorial what java history java features java c vs java hello java program program internal how set path jdk jre jvm jvm java virtual machine java variables java data types unicode system operators keywords control statements java ifelse java switch java loop java while loop java do while loop java break java continue java comments java programs java object class java oops concepts naming convention object class method constructor static keyword keyword java inheritance inheritanceisa aggregationhasa java polymorphism method overloading method overriding covariant return type super keyword instance initializer block final keyword runtime polymorphism dynamic binding instanceof operator java abstraction abstract class interface abstract vs interface java encapsulation package access modifiers encapsulation java array java array java oops misc object class object cloning math class wrapper class java recursion call value strictfp keyword javadoc tool command line arg object vs class overloading vs overriding java string java regex exception handling java inner classes java multithreading java io java networking java awt events java swing javafx java applet java reflection java date java conversion java collection java jdbc java misc java new features rmi internationalization interview questions java mcq next prev delegation event model java delegation event model defined handle events gui programming languages gui stands graphical user interface user graphicallyvisually interacts system gui programming inherently eventdriven whenever user initiates activity mouse activity clicks scrolling etc known event mapped code respond functionality user known event handling section discuss event processing implement delegation event model java we also discuss different components event model event processing java java support event processing since java provides support awt abstract window toolkit api used develop desktop application java awt based inheritance catch process gui events program hold subclass gui components override action handleevent methods image demonstrates event processing modern approach event processing based delegation model defines standard compatible mechanism generate process events model source generates event forwards one listeners listener waits receives event once receives event processed listener returns ui elements able delegate processing event separate function key advantage delegation event model application logic completely separated interface logic model listener must connected source receive event notifications thus events received listeners wish receive so approach convenient inheritancebased event model java older model event propagated containment component handled needed components receive events processed took lots time delegation event model overcame issue basically event model based following three components events events sources events listeners events events objects define state change source event generated reaction user interacting gui elements some event generation activities moving mouse pointer clicking button pressing keyboard key selecting item list we also consider many user operations events events may also occur may related user interaction timer expires counter exceeded system failures task completed etc we define events applied actions event sources source object causes generates event generates event internal state object changed sources allowed generate several different types events source must register listener receive notifications specific event each event contains registration method below example
