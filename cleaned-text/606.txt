types garbage collector java javatpoint home java programs oops string regex exception multithreading collections jdbc swing javafx servlet jsp spring spring boot projects interview questions java training java tutorial what java history java features java c vs java hello java program program internal how set path jdk jre jvm jvm java virtual machine java variables java data types unicode system operators keywords control statements java ifelse java switch java loop java while loop java do while loop java break java continue java comments java programs java object class java oops concepts naming convention object class method constructor static keyword keyword java inheritance inheritanceisa aggregationhasa java polymorphism method overloading method overriding covariant return type super keyword instance initializer block final keyword runtime polymorphism dynamic binding instanceof operator java abstraction abstract class interface abstract vs interface java encapsulation package access modifiers encapsulation java array java array java oops misc object class object cloning math class wrapper class java recursion call value strictfp keyword javadoc tool command line arg object vs class overloading vs overriding java string java regex exception handling java inner classes java multithreading java io java networking java awt events java swing javafx java applet java reflection java date java conversion java collection java jdbc java misc java new features rmi internationalization interview questions java mcq next prev types garbage collector java java garbage collection mechanism provides automatic memory management done jvm need handle object allocation deallocation programmer previous sections also discussed garbage collection works introduced garbage collection suggest first go garbage collection java heap memory management section discuss types garbage collection java types garbage collector four types garbage collector java used according requirement serial garbage collector parallel garbage collector concurrent mark sweep cms garbage collector garbage first g garbage collector performance working garbage collector completely different pros cons java allows us choose one garbage collector used jvm selection gc need pass jvm arguments difficult select right garbage collector application lets discuss garbage collector one one serial garbage collector serial garbage collector wellmatched singlethreaded environments uses thread garbage collection works holding threads application means threads application freeze serial garbage collector garbage collection process process known stop world event avoid use serial gc server environment we use simple programs want use serial garbage collector execute xx useserialgc jvm argument activate parallel garbage collector parallel garbage collector default gc used jvm working parallel garbage collector serial garbage collector difference serial parallel garbage collector serial garbage collector uses single thread garbage collection process parallel garbage collector uses multiple threads garbage collection parallel gc use multiple cpus speed application throughput so also known throughput collector used want execute long process like batch processing long pauses acceptable want use parallel garbage collector execute xx useparallelgc jvm argument activate we also use following jvm arguments parallel gc jvm argument description xxparallelgcthreads n controls number gc threads n xxmaxgcpausemillis t specifies maximum pause time xxgctimeratio n specifies maximum throughput target pause time gap two gc throughput target time spent garbage collection versus time spent outside garbage collection called throughput target concurrent mark sweep cms garbage collector cms uses multiple threads scan heap scanning marks instances eviction scanning sweeps marked instances freeze applications threads garbage collection gc threads concurrently execute applications threads reason uses cpu comparison gc also known concurrent low pause collector also freezes threads application satisfies following two scenarios marking referenced objects tenured generation region change made heap memory parallel garbage collection process we use multiple cpus better application throughput we use cms garbage collector cpus use hence advantage parallel garbage collector want use cms garbage collector execute xx useparnewgc jvm argument activate we also set number gc threads using xxparallelcmsthreads n jvm argument note jvm argument xx useconcmarksweepgc deprecated warning message issued requested command line garbage first g garbage collector g garbage collector used large gb memory heap space divides heap equalsized usually mb mb chunks prioritizes performs parallel garbage collection chunks based priority eden survivors old areas use equalsized region memory allocation objects apart memory regions two types regions presented g gc humongous used object sized large available represents unoccupied space g gc shows concurrent global marking phase determine live dead objects throughout heap after completion mark phase g collects information regions contains garbage objects after regions swept first want use g garbage collector execute xx useg gc jvm argument activate stop world event situation garbage collector performs garbage collection gc stops applications threads gc process completed process known stop world stw events improvement garbage collector since java java g garbage collector updated updated gc provides xx usestringdeduplication jvm argument optimizes heap memory removes duplicate string values single char array garbage collection jvm options java garbage collection key options follows jvm arguments table describes arguments used instruct jvm option description xx useserialgc serial garbage collector xx useparallelgc parallel garbage collector xx useconcmarksweepgc cms garbage collector xxparallelcmsthreads cms collector number threads use xx useg gc g garbage collector some other important arguments xxinitiatingheapoccupancypercent n controls heap occupancy starting concurrent cycle here n percentage heap space default percentage xxg mixedgclivethresholdpercent t live object old region exists value greater equal option excluded gc object here time milliseconds default value xxg heapwastepercent r specifies many regions allowed wasted here r number regions default value gc optimization options option description xms specifies initial heap size xmx maximizes heap size xmn used specify size young generation xxpermsize initial permanent generation size xxmaxpermsize used specify maximum size permanent generation permgen usage jvm gc options
