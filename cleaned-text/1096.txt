red black tree java javatpoint home java programs oops string regex exception multithreading collections jdbc swing javafx servlet jsp spring spring boot projects interview questions java training java tutorial what java history java features java c vs java hello java program program internal how set path jdk jre jvm jvm java virtual machine java variables java data types unicode system operators keywords control statements java ifelse java switch java loop java while loop java do while loop java break java continue java comments java programs java object class java oops concepts naming convention object class method constructor static keyword keyword java inheritance inheritanceisa aggregationhasa java polymorphism method overloading method overriding covariant return type super keyword instance initializer block final keyword runtime polymorphism dynamic binding instanceof operator java abstraction abstract class interface abstract vs interface java encapsulation package access modifiers encapsulation java array java array java oops misc object class object cloning math class wrapper class java recursion call value strictfp keyword javadoc tool command line arg object vs class overloading vs overriding java string java regex exception handling java inner classes java multithreading java io java networking java awt events java swing javafx java applet java reflection java date java conversion java collection java jdbc java misc java new features rmi internationalization interview questions java mcq next prev red black tree java red black tree special type binary search tree selfbalancing behavior each node redblack tree extra bit always interpreted color order maintain balancing redblack tree insertion updation deletion red black colors used red black tree each node either color red black root node always black red node parent child red color each path node descendants null nodes number black nodes algorithm insert element red black tree when insert node redblack tree always inserts color bit ie red case redblack tree violates property inserting node perform following two operation maintaining colors node perform rotation either right left left right algorithm inserting node redblack tree given let x y root leaf node redblack tree check whether root node empty root node empty inserting node added root node color bit ie black else compare root node element inserting node element greater root node element traverse right subtree else traverse left subtree repeat steps leaf node reached make leaf nodes parent parent inserting node leaf node element lesser inserting node element make inserting node leftchild else make inserting node rightchild right left children inserting node assign null set bit ie red color newly inserted node maintain property redblack tree violated performing rotation changing color bits algorithm maintain red black tree insertion inserting node violets property red block tree need maintain using following algorithm perform following steps parent p inserted node become red parent inserted node left child grandparent node z perform following steps case when color right child zs grandparent red make grandparent nodes children black make grandparent red assign grandparent node newly inserted node case else newly inserted node right child parent node p assign p newly inserted node perform leftrotation newly inserted node case make parent node p black grandparent node red performs rightrotation newly inserted node else perform following steps left child zs grandparent node red make grandparent nodes children black grandparent node red assign grandparent node newly inserted node else newly inserted node left child parent p assign parent node newly inserted node perform right rotation new node make parent node p black grandparent node red perform left rotation grandparent node make root node black redblacktreeexamplejava
