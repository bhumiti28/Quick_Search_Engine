stack vs heap javatpoint home data structure c c c java sql html css javascript ajax android cloud design pattern quiz projects interview q comment forum ds tutorial ds tutorial ds introduction ds algorithm asymptotic analysis ds pointer ds structure ds array ds array d array ds linked list linked list types linked list singly linked list doubly linked list circular linked list circular doubly list skip list ds ds stack ds stack array implementation linked list implementation ds queue ds queue types queues array representation linked list representation circular queue deque priority queue ds tree ds tree binary tree binary search tree avl tree b tree b tree ds graph ds graph graph implementation bfs algorithm dfs algorithm spanning tree ds searching linear search binary search ds sorting bubble sort bucket sort comb sort counting sort heap sort insertion sort merge sort quick sort radix sort selection sort shell sort bitonic sort cocktail sort cycle sort tim sort differences linear vs nonlinear array vs linked list stack vs queue linear vs circular queue linear search vs binary search singly linked list vs doubly linked list binary vs binary search tree tree vs graph binary search tree vs avl tree red black tree vs avl tree b tree vs b tree quick sort vs merge sort bfs vs dfs stack vs heap bubble sort vs selection sort misc trie data structure heap data structure splay tree fundamental ds hash table preorder traversal tree traversal implementation queue using stacks implementation stack using queue binomial heap postorder traversal sparse matrix detect loop linked list inorder traversal convert infix postfix notation convert infix prefix notation conversion prefix postfix expression conversion postfix prefix expression ds mcq data structure mcq next prev stack vs heap before understanding differences stack heap data structure know stack heap data structure separately what stack stack data structure used organizing data stack similar stack way organizing objects real world some examples stack real world stack dinner plates mathematical puzzle known tower hanoi containing three rods multiple discs stack tennis balls stack collection property item object must removed one end known top stack cannot considered property rather considered constraint restriction applied stack words say top stack accessible item removed inserted top stack follows lifo last first out principle recently added element must removed stack first stack list collection restriction insertion deletion take place one end known top stack operation following two operations available stack adt push process inserting element stack known push operation posh operation written pushx inserts element x stack pop process deleting element stack known pop operation pop operation represented pop removes recent element stack representation stack stack shown we observe figure stack looks like container opened one side represented logically threesided figure container open one side representation empty stack lets assume stack stack integers now perform push pop operations stack suppose want insert element stack after push operation stack would look like since one element stack element would top stack want insert element stack stack would like since element comes element element would considered top stack perform pop operation topmost element ie would removed stack shown what heap heap also data structure memory used store global variables default global variables stored heap memory allows dynamic memory allocation heap memory managed cpu heap data structure implemented either using arrays trees complete binary tree satisfies condition heap property complete binary tree tree levels completely filled except last level last level nodes far left possible pointers dynamic memory here see architecture memory crucial know system manages memory accessible us programmers memory assigned program application typical architecture divided four segments one segment memory stores instructions executed another segment memory stores global static variables global variables variables declared outside function lifetime throughout program third segment ie stack used store function calls local variables when function called occupies space memory known stack memory lets understand stack memory example
