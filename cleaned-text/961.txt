detect loop linked list javatpoint home data structure c c c java sql html css javascript ajax android cloud design pattern quiz projects interview q comment forum ds tutorial ds tutorial ds introduction ds algorithm asymptotic analysis ds pointer ds structure ds array ds array d array ds linked list linked list types linked list singly linked list doubly linked list circular linked list circular doubly list skip list ds ds stack ds stack array implementation linked list implementation ds queue ds queue types queues array representation linked list representation circular queue deque priority queue ds tree ds tree binary tree binary search tree avl tree b tree b tree ds graph ds graph graph implementation bfs algorithm dfs algorithm spanning tree ds searching linear search binary search ds sorting bubble sort bucket sort comb sort counting sort heap sort insertion sort merge sort quick sort radix sort selection sort shell sort bitonic sort cocktail sort cycle sort tim sort differences linear vs nonlinear array vs linked list stack vs queue linear vs circular queue linear search vs binary search singly linked list vs doubly linked list binary vs binary search tree tree vs graph binary search tree vs avl tree red black tree vs avl tree b tree vs b tree quick sort vs merge sort bfs vs dfs stack vs heap bubble sort vs selection sort misc trie data structure heap data structure splay tree fundamental ds hash table preorder traversal tree traversal implementation queue using stacks implementation stack using queue binomial heap postorder traversal sparse matrix detect loop linked list inorder traversal convert infix postfix notation convert infix prefix notation conversion prefix postfix expression conversion postfix prefix expression ds mcq data structure mcq next prev detect loop linked list loop linked list condition occurs linked list end when loop exists linked list last pointer point null observed singly linked list doubly linked list head linked list observed circular linked list when loop exists points node also known linked list cycle lets understand loop example figure observe loop exists linked list here problem statement detect node start loop solution solve problem first detect loop linked list detect start node loop detecting loop first detect loop linked list understand look algorithm detecting loop step first initialize two pointers ie s slow pointer f fast pointer initially pointers point first node linked list step move s pointer one node time move f pointer two nodes time step point pointers ie s f point node loop linked list otherwise loop exists lets visualize algorithm clarity observe figure pointers ie s f point first node now move s pointer one f pointer two meet f pointer reaches end node means loop linked list s pointer moves one whereas f pointer moves two s pointer points node f pointer points node shown since pointers point node f pointer reach end node move pointers now pointer s move node pointer f move node shown since pointers point node increment pointers now s point node f point node shown since pointers point node increment pointers now s point node f point node shown since pointers point node increment pointers now s point node f also point node shown observe figure pointers point node ie therefore loop exists linked list detecting start loop here need detect origination loop we consider example discussed detecting loop detect start loop consider algorithm step move s start list f would remain point node step move s f forward one node time meet step node meet start loop lets visualize algorithm clarity first increment pointer s f one s f would point node node respectively shown since node met increment pointers one node shown observe figure s pointer points node f pointer points node so increment pointers one node now s would point node f would point node shown observe figure pointers point node increment pointers one node now pointer s f point node shown since pointers point node ie therefore conclude starting node loop node why algorithm works consider l denotes length loop measure number links l length loop observe figure five links consider m distance start loop beginning list words m defined distance starting node node loop gets started so figure m starting node node loop gets started consider k distance meeting point s f start loop meet first time detecting loop linked list value k would node fast slow pointers meet first time node loop started when s f meet first time lets assume total distance covered slow pointer distances total distance covered fast pointer distancef distances m pl k total distance covered s sum distance beginning list start loop distance covered slow pointer loop distance start loop node pointers meet distancef m ql k q p since speed s greater speed f know s f met first time f traverses twice faster s pointer therefore distance covered f would two times distance covered s mathematically represented distancef distances equation written m ql k m pl k solving equation would get m k q pl implies m k integer multiple l length loop implementation detecting loop c
