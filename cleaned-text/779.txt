sparse matrix javatpoint home data structure c c c java sql html css javascript ajax android cloud design pattern quiz projects interview q comment forum ds tutorial ds tutorial ds introduction ds algorithm asymptotic analysis ds pointer ds structure ds array ds array d array ds linked list linked list types linked list singly linked list doubly linked list circular linked list circular doubly list skip list ds ds stack ds stack array implementation linked list implementation ds queue ds queue types queues array representation linked list representation circular queue deque priority queue ds tree ds tree binary tree binary search tree avl tree b tree b tree ds graph ds graph graph implementation bfs algorithm dfs algorithm spanning tree ds searching linear search binary search ds sorting bubble sort bucket sort comb sort counting sort heap sort insertion sort merge sort quick sort radix sort selection sort shell sort bitonic sort cocktail sort cycle sort tim sort differences linear vs nonlinear array vs linked list stack vs queue linear vs circular queue linear search vs binary search singly linked list vs doubly linked list binary vs binary search tree tree vs graph binary search tree vs avl tree red black tree vs avl tree b tree vs b tree quick sort vs merge sort bfs vs dfs stack vs heap bubble sort vs selection sort misc trie data structure heap data structure splay tree fundamental ds hash table preorder traversal tree traversal implementation queue using stacks implementation stack using queue binomial heap postorder traversal sparse matrix detect loop linked list inorder traversal convert infix postfix notation convert infix prefix notation conversion prefix postfix expression conversion postfix prefix expression ds mcq data structure mcq next prev sparse matrix matrix defined twodimensional array m columns n rows representing mn matrix sparse matrices matrices majority elements equal zero words sparse matrix defined matrix greater number zero elements nonzero elements why need use sparse matrix instead simple matrix we also use simple matrix store elements memory need use sparse matrix following advantages using sparse matrix storage know sparse matrix contains lesser nonzero elements zero less memory used store elements evaluates nonzero elements computing time case searching n sparse matrix need traverse nonzero elements rather traversing sparse matrix elements saves computing time logically designing data structure traversing nonzero elements representing sparse matrix d array leads wastage lots memory zeroes matrix use store zeroes nonzero elements avoid wastage store nonzero elements store nonzero elements reduces traversal time storage space sparse matrix representation nonzero elements stored triples ie rows columns value sparse matrix represented following ways array representation linked list representation array representation d array used represent sparse matrix three rows named row index row nonzero element located column index column nonzero element located value value nonzero element located index row column lets understand sparse matrix using array representation example observe sparse matrix represented using triplets ie row column value sparse matrix zero elements nonzero elements sparse matrix occupies memory space size sparse matrix increased wastage memory space also increased sparse matrix represented tabular form shown table structure first column representing row number second column representing column number third column represents nonzero value indexrow column size table depends upon number nonzero elements sparse matrix table occupies sparse matrix consider case matrix nonzero elements matrix space occupied sparse matrix would whereas space occupied table represented using triplets would th row nd column value available th row rd column value stored st row nd column value stored st row rd column value stored nd row nd column value stored rd row th column value stored rd row st column value stored array implementation sparse matrix c
