https://www.geeksforgeeks.org/analysis-of-algorithms-set-3asymptotic-notations/
Analysis of Algorithms | Set 3 (Asymptotic Notations) - GeeksforGeeks
Analysis of Algorithms | Set 3 (Asymptotic Notations) - GeeksforGeeks Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies HTML CSS Javascript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Student Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Jobs Apply for Jobs Post a Job Courses Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Campus Mantri Geeks Campus Gblog Articles IDE Home Courses GBlog Puzzles What's New ? Related Articles ? Related Articles Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness | Set 1 (Introduction) A Time Complexity Question Merge Sort QuickSort HeapSort Binary Heap Time Complexity of building a heap Applications of Heap Data Structure Binomial Heap Fibonacci Heap | Set 1 (Introduction) Fibonacci Heap – Insertion and Union Fibonacci Heap – Deletion, Extract min and Decrease key Leftist Tree / Leftist Heap K-ary Heap Iterative HeapSort Analysis of Algorithms | Set 1 (Asymptotic Analysis) Understanding Time Complexity with Simple Examples Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Set 3 (Asymptotic Notations) Difficulty Level : Easy Last Updated : 04 Feb, 2021 We have discussed Asymptotic Analysis, and Worst, Average, and Best Cases of Algorithms. The main idea of asymptotic analysis is to have a measure of the efficiency of algorithms that don’t depend on machine-specific constants and doesn’t require algorithms to be implemented and time taken by programs to be compared. Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis. The following 3 asymptotic notations are mostly used to represent the time complexity of algorithms. 1) ? Notation: The theta notation bounds a function from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants. For example, consider the following expression. 3n3 + 6n2 + 6000 = ?(n3) Dropping lower order terms is always fine because there will always be a number(n) after which ?(n3) has higher values than ?(n2) irrespective of the constants involved. For a given function g(n), we denote ?(g(n)) is following set of functions. ?(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such 
                 that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The above definition means, if f(n) is theta of g(n), then the value f(n) is always between c1*g(n) and c2*g(n) for large values of n (n >= n0). The definition of theta also requires that f(n) must be non-negative for values of n greater than n0. 2) Big O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in best case and quadratic time in worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time. If we use ? notation to represent time complexity of Insertion sort, we have to use two statements for best and worst cases: 1. The worst case time complexity of Insertion Sort is ?(n^2). 2. The best case time complexity of Insertion Sort is ?(n). The Big O notation is useful when we only have upper bound on time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm. O(g(n)) = { f(n): there exist positive constants c and 
                  n0 such that 0 <= f(n) <= c*g(n) for 
                  all n >= n0} 3) ? Notation: Just as Big O notation provides an asymptotic upper bound on a function, ? notation provides an asymptotic lower bound. ? Notation can be useful when we have lower bound on time complexity of an algorithm. As discussed in the previous post, the best case performance of an algorithm is generally not useful, the Omega notation is the least used notation among all three. For a given function g(n), we denote by ?(g(n)) the set of functions. ? (g(n)) = {f(n): there exist positive constants c and
                  n0 such that 0 <= c*g(n) <= f(n) for
                  all n >= n0}. Let us consider the same Insertion sort example here. The time complexity of Insertion Sort can be written as ?(n), but it is not a very useful information about insertion sort, as we are generally interested in worst case and sometimes in average case. Properties of Asymptotic Notations : As we have gone through the definition of this three notations let’s now discuss some important properties of those notations. 1. General Properties : If f(n) is O(g(n)) then a*f(n) is also O(g(n)) ; where a is a constant. Example: f(n) = 2n²+5 is O(n²) then 7*f(n) = 7(2n²+5) = 14n²+35 is also O(n²) . Similarly this property satisfies for both ? and ? notation. We can say If f(n) is ?(g(n)) then a*f(n) is also ?(g(n)) ; where a is a constant. If f(n) is ? (g(n)) then a*f(n) is also ? (g(n)) ; where a is a constant. 2. Transitive Properties : If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . Example: if f(n) = n, g(n) = n² and h(n)=n³ n is O(n²) and n² is O(n³) then n is O(n³) Similarly this property satisfies for both ? and ? notation. We can say If f(n) is ?(g(n)) and g(n) is ?(h(n)) then f(n) = ?(h(n)) . If f(n) is ? (g(n)) and g(n) is ? (h(n)) then f(n) = ? (h(n)) 3. Reflexive Properties : Reflexive properties are always easy to understand after transitive. If f(n) is given then f(n) is O(f(n)). Since MAXIMUM VALUE OF f(n) will be f(n) ITSELF ! Hence x = f(n) and y = O(f(n) tie themselves in reflexive relation always. Example: f(n) = n² ; O(n²) i.e O(f(n)) Similarly this property satisfies for both ? and ? notation. We can say that: If f(n) is given then f(n) is ?(f(n)). If f(n) is given then f(n) is ? (f(n)). 4. Symmetric Properties : If f(n) is ?(g(n)) then g(n) is ?(f(n)) . Example: f(n) = n² and g(n) = n² then f(n) = ?(n²) and g(n) = ?(n²) This property only satisfies for ? notation. 5. Transpose Symmetric Properties : If f(n) is O(g(n)) then g(n) is ? (f(n)). Example: f(n) = n , g(n) = n² then n is O(n²) and n² is ? (n) This property only satisfies for O and ? notations. 6. Some More Properties : 1.) If f(n) = O(g(n)) and f(n) = ?(g(n)) then f(n) = ?(g(n)) 2.) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) + d(n) = n + n² i.e O(n²) 3.) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) * d(n) = n * n² = n³ i.e O(n³) _______________________________________________________________________________ Exercise: Which of the following statements is/are valid? 1. Time Complexity of QuickSort is ?(n^2) 2. Time Complexity of QuickSort is O(n^2) 3. For any two functions f(n) and g(n), we have f(n) = ?(g(n)) if and only if f(n) = O(g(n)) and f(n) = ?(g(n)). 4. Time complexity of all computer algorithms can be written as ?(1) Important Links : There are two more notations called little o and little omega. Little o provides strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega) Analysis of Algorithms | Set 4 (Analysis of Loops) Recent Articles on analysis of algorithm. References: Lec 1 | MIT (Introduction to Algorithms) This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save favorite_border Like first_page Previous Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Next last_page Analysis of Algorithms | Set 4 (Analysis of Loops) Recommended Articles Page : Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Properties of Asymptotic Notations 06, Sep 19 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of algorithms | little o and little omega notations 14, Aug 17 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Practice Questions on Time Complexity Analysis 12, Dec 17 Analysis of different sorting techniques 29, Jan 18 Amortized analysis for increment in counter 23, Mar 18 Complexity Analysis of Binary Search 29, May 19 Difference between Posteriori and Priori analysis 07, Aug 19 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Examples of Big-O analysis 23, Nov 20 What is algorithm and why analysis of it is important? 12, Jan 21 Algorithms | Recurrences | Set 1 27, Dec 18 Algorithms Sample Questions | Recurrences | Set 2 27, May 19 Pseudo-polynomial Algorithms 27, Feb 16 Difference between Deterministic and Non-deterministic Algorithms 11, Sep 18 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Easy Easy Normal Medium Hard Expert Improved By : OmkarJai AmiyaRanjanRout kaustubh765 skmodi20bce2835 Article Tags : Analysis Articles Report Issue What’s New Data Structures and Algorithms – Self Paced Course View Details Ad-Free Experience – GeeksforGeeks Premium View Details Most popular in Analysis Practice Questions on Time Complexity Analysis Analysis of Algorithms | Big-O analysis Analysis of different sorting techniques Complexity Analysis of Binary Search Tail Recursion Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Tree Traversals (Inorder, Preorder and Postorder) SQL | Join (Inner, Left, Right and Full Joins) Practice for cracking any coding interview find command in Linux with examples Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Copyright Policy Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !
