https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/
Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks
Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies HTML CSS Javascript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Student Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Jobs Apply for Jobs Post a Job Courses Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Campus Mantri Geeks Campus Gblog Articles IDE Home Courses GBlog Puzzles What's New ? Related Articles ? Related Articles Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness | Set 1 (Introduction) A Time Complexity Question Merge Sort QuickSort HeapSort Binary Heap Time Complexity of building a heap Applications of Heap Data Structure Binomial Heap Fibonacci Heap | Set 1 (Introduction) Fibonacci Heap – Insertion and Union Fibonacci Heap – Deletion, Extract min and Decrease key Leftist Tree / Leftist Heap K-ary Heap Iterative HeapSort Analysis of Algorithms | Set 1 (Asymptotic Analysis) Understanding Time Complexity with Simple Examples Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Difficulty Level : Medium Last Updated : 27 Mar, 2021 Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes slow, but space required becomes high. The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take ?(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn’t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. Amortized analysis of insertion in Red-Black Tree Let us discuss the Amortized Analysis of Red-Black Tree operations (Insertion) using Potential Method. To perform the amortized analysis of Red-Black Tree Insertion operation, we use Potential(or Physicist’s) method. For potential method, we define a potential function that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function in the following manner: (1) where n is a node of Red-Black Tree Potential function = ,over all nodes of the red black tree. Further, we define the amortized time of an operation as: Amortized time= c + (h) (h)= (h’) – (h) where h and h’ are the states of Red-Black Tree before and after the operation respectively c is the actual cost of the operation The change in potential should be positive for low-cost operations and negative for high-cost operations. A new node is inserted on a leaf of a red-black tree. We have the leaves of a red-black tree of any one of the following types: The insertions and their amortized analysis can be represented as: (1) This insertion is performed by first recolouring the parent and the other sibling(red). Then the grandparent and uncle of that leaf node is considered for further recolouring which leads to the amortized cost to be -1(when grandparent of the leaf node is red), -2 (when uncle of the leaf is black and grandparent is black) or +1 (when uncle of the leaf is red and grandparent is black). The insertion can be shown as: (2) In this insertion, the node is inserted without any changes as the black depth of the leaves remain the same. This is the case when leaf may have a black sibling or do not have any sibling (since we consider the colour of the colour of null node to be black). So, the amortized cost of this insertion is 0. (3) In this insertion, we cannot recolour the leaf node, its parent and the sibling such that the black depth stays the same as before. So, we need to perform a Left- Left rotation. After rotation, there are no changes when the grandparent of g(the inserted node) is black. Also, for the case of Red Grandparent of g(the inserted node), we do not have any changes. So, the insertion is completed with amortized cost= +2. The insertion has been depicted below: After calculating these particular amortized costs at the leaf site of a red-black tree we can discuss the nature of total amortized cost of insertion in a red-black tree. Since this may happen that two red nodes may have a parent-child relationship till the root of the red-black tree. So in extreme(or corner) case, we reduce the number of black nodes with two red children by 1 and we at most increase the number of black nodes with no red children by 1, leaving a net loss of at most 1 to the potential function. Since one unit of potential pays for each operation therefore (h) n where n is total number of nodes Thus, the total amortized cost of insertion in Red-Black Tree is O(n). For any doubts regarding insertions in red black tree, you may refer Insertions in Red-Black Tree. Sources: Berkeley Lecture 35: Amortized Analysis MIT Lecture 13: Amortized Algorithms, Table Doubling, Potential Method http://www.cs.cornell.edu/courses/cs3110/2011sp/lectures/lec20-amortized/amortized.htm http://web.iitd.ac.in/~csz188551/COL106_2019/ Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save favorite_border Like first_page Previous Analysis of Algorithm | Set 4 (Solving Recurrences) Next last_page What does 'Space Complexity' mean? Recommended Articles Page : Amortized analysis for increment in counter 23, Mar 18 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 What is algorithm and why analysis of it is important? 12, Jan 21 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of algorithms | little o and little omega notations 14, Aug 17 Practice Questions on Time Complexity Analysis 12, Dec 17 Analysis of different sorting techniques 29, Jan 18 Complexity Analysis of Binary Search 29, May 19 Difference between Posteriori and Priori analysis 07, Aug 19 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Examples of Big-O analysis 23, Nov 20 Algorithm Practice Question for Beginners | Set 1 08, Nov 14 NP-Completeness | Set 1 (Introduction) 22, Aug 13 Online Algorithm 06, Oct 17 In-Place Algorithm 26, Jul 18 Sorting algorithm visualization : Insertion Sort 26, Jun 20 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Medium Easy Normal Medium Hard Expert Improved By : ashwinikumar43215 nishantproductive Article Tags : Analysis Report Issue What’s New Data Structures and Algorithms – Self Paced Course View Details Ad-Free Experience – GeeksforGeeks Premium View Details Most popular in Analysis Practice Questions on Time Complexity Analysis Analysis of Algorithms | Big-O analysis Analysis of different sorting techniques Complexity Analysis of Binary Search Tail Recursion More related articles in Analysis Difference between Big Oh, Big Omega and Big Theta Analysis of Algorithms | Set 5 (Practice Problems) Measure execution time with high precision in C/C++ Analysis of algorithms | little o and little omega notations Lower and Upper Bound Theory Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Copyright Policy Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !
