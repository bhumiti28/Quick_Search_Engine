https://www.geeksforgeeks.org/analysis-of-algorithms-set-1-asymptotic-analysis/
Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks
Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks Skip to content Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies HTML CSS Javascript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Student Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Jobs Apply for Jobs Post a Job Courses Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Campus Mantri Geeks Campus Gblog Articles IDE Home Courses GBlog Puzzles What's New ? Related Articles ? Related Articles Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness | Set 1 (Introduction) A Time Complexity Question Merge Sort QuickSort HeapSort Binary Heap Time Complexity of building a heap Applications of Heap Data Structure Binomial Heap Fibonacci Heap | Set 1 (Introduction) Fibonacci Heap – Insertion and Union Fibonacci Heap – Deletion, Extract min and Decrease key Leftist Tree / Leftist Heap K-ary Heap Iterative HeapSort Understanding Time Complexity with Simple Examples Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Set 1 (Asymptotic Analysis) Difficulty Level : Basic Last Updated : 09 Nov, 2020 Why performance analysis? There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance? The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is – speed is fun! To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead. Given two algorithms for a task, how do we find out which one is better? One naive way of doing this is – implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms. 1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better. 2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs. Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size. For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size. Here are some running times for this example: Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) 
------------------------------------------------
|n      | Running time on A | Running time on B |
-------------------------------------------------
|10     | 2 sec             | ~ 1 h             |
-------------------------------------------------
|100    | 20 sec            | ~ 1.8 h           |
-------------------------------------------------
|10^6   | ~ 55.5 h          | ~ 5.5 h           |
-------------------------------------------------
|10^9   | ~ 6.3 years       | ~ 8.3 h           |
-------------------------------------------------
 Does Asymptotic Analysis always work? Asymptotic Analysis is not perfect, but that’s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can’t judge which one is better as we ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Next – Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save favorite_border Like Next last_page Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Recommended Articles Page : Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Properties of Asymptotic Notations 06, Sep 19 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Analysis of algorithms | little o and little omega notations 14, Aug 17 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Practice Questions on Time Complexity Analysis 12, Dec 17 Analysis of different sorting techniques 29, Jan 18 Amortized analysis for increment in counter 23, Mar 18 Complexity Analysis of Binary Search 29, May 19 Difference between Posteriori and Priori analysis 07, Aug 19 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Examples of Big-O analysis 23, Nov 20 What is algorithm and why analysis of it is important? 12, Jan 21 Algorithms | Recurrences | Set 1 27, Dec 18 Algorithms Sample Questions | Recurrences | Set 2 27, May 19 Pseudo-polynomial Algorithms 27, Feb 16 Difference between Deterministic and Non-deterministic Algorithms 11, Sep 18 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Basic Easy Normal Medium Hard Expert Improved By : Danail Kozhuharov biplab_prasad BenceAment Article Tags : Analysis Articles Report Issue What’s New Data Structures and Algorithms – Self Paced Course View Details Ad-Free Experience – GeeksforGeeks Premium View Details Most popular in Analysis Practice Questions on Time Complexity Analysis Analysis of Algorithms | Big-O analysis Analysis of different sorting techniques Complexity Analysis of Binary Search Tail Recursion Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... Tree Traversals (Inorder, Preorder and Postorder) SQL | Join (Inner, Left, Right and Full Joins) Practice for cracking any coding interview find command in Linux with examples Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Copyright Policy Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !
