https://www.javatpoint.com/hld-vs-lld
Difference Between HLD and LLD - javatpoint
Difference Between HLD and LLD - javatpoint ? Home Software Testing Compiler Java COA Computer Network HTML CSS Selenium Servlet JSP jQuery Quiz Projects Interview Q Comment Forum Training Software Testing Tutorial Software Testing Principles Software Development Life Cycle Software Testing Life Cycle Types of Software Testing SDLC models Waterfall model Spiral Model Hybrid Model Prototype Model V-model Types of Testing Manual Testing Automation Testing Types of Manual White Box Testing Black Box Testing Grey Box Testing White Box Techniques Data Flow Testing Control Flow Testing Branch Coverage Testing Statement Coverage Testing Decision Coverage Testing Black Box Techniques Decision Table All-pair Testing Cause-Effect Testing State Transition Use Case Types of Black Box Functional Testing Non-Functional Testing Types of Functional Unit Testing Integration Testing System Testing Types of Non-functional Performance Testing Usability Testing Compatibility Testing Test case development Testing Documentation Test Scenario Test Case Testing Techniques Error Guessing Equivalence Portioning Boundary Value analysis Test Management Test Plan Test case review process Requirement Traceability Matrix Defect Tracking Bug in Software Testing Bug Life cycle Severity & Priority Test Environment Other types of Testing Regression Testing Smoke Testing Sanity Testing Static Testing Dynamic Testing Load Testing Stress Testing Recovery testing Exploratory Testing Visual Testing Acceptance Testing Alpha Testing Beta Testing Database Testing Mainframe Testing Adhoc Testing Globalization Testing Mutation Testing Security Testing Accessibility Testing Structural Testing Volume Testing Scalability Testing Stability Testing Spike Testing Negative Testing Positive Testing Software Testing Tools Software testing tools Test management tools Defect/Bug tracking tools Automation testing tools Performance testing tools Cross-browser testing tools Integration testing tools Unit testing tools Mobile Testing Tools GUI testing tools Security testing tools Penetration Testing Tools Differences Automation Testing vs Manual Testing Load Testing vs Stress Testing Smoke Testing vs Sanity Testing System Testing vs Acceptance Testing Quality Assurance vs Quality Control Static Testing vs Dynamic Testing Verification vs Validation Testing Alpha Testing vs Beta Testing Black Box vs. White Box vs. Grey Box Testing Globalization Testing vs Localization Testing Test Case vs Test Scenarios Test Plan vs Test Strategy Boundary value analysis vs Equivalence partitioning SDLC vs STLC Bug vs Defect vs Error vs Fault vs Failure Testing vs Debugging Frontend Testing vs Backend Testing HLD vs LLD BRS vs SRS Positive Testing vs Negative Testing Software Testing MCQ Software Testing MCQ Interview Questions Software Testing Interview next ? ? prev Difference Between HLD and LLD In this section, we are going to discuss the difference between HLD and LLD; and see the brief introduction between them. What is HLD? The HLD stands for High-Level Design, where the designer will only focus on the various models, like: Decision Tables Decision Trees Flow Diagrams Flow Charts Data Dictionary The solution architect develops the High-level design, which is used to specifies the complete description or architecture of the application. The HLD involves system architecture, database design, a brief description of systems, services, platforms, and relationships among modules. The HLD is also known as macro-level or system design. It changes the business or client requirement into a High-Level Solution. The High-level design is created before the Low-Level Design. What is LLD? The LLD stands for Low-Level Design, in which the designer will focus on the components like a User interface (UI). The Low-level design is created by the developer manager and designers. It is also known as micro-level or detailed design. The LLD can change the High-Level Solution into a detailed solution. The Low-level design specifics the detailed description of all modules, which implies that the LLD involves all the system component's actual logic. It goes deep into each module's specification. The Low-level design is created after the High-Level Design. HLD vs LLD In the below table, we have discussed some significant comparisons between high-level design and low-level design. S.NO. Comparison Basis HLD LLD 1. Stands for It stands for High-Level Design. It stands for Low-Level Design. 2. Definition It is the general system design, which means it signifies the overall system design. It is like describing high-level design, which means it signifies the procedure of the component-level design. 3. Purpose The HLD states the concise functionality of each component. LLD states the particular efficient logic of the component. 4. Also, known as HLD is also called a System or macro-level design. LLD is also called details or micro-level design. 5. Developed by Solution Architect prepares the High-Level Design. Designer and developer prepare the Low-Level Design. 6. Sequential order in the design phase It is developed first in sequential order, which implies that the HLD is created before the LLD. It is developed after High-level design. 7. Target Audience It is used by management, program, and solution teams. It is used by designers, operation teams, and implementers. 8. Conversion The HLD changes the client or business requirement into a high-level solution. The LLD changes the high-level solution to a comprehensive solution. 9. Probable output The high-level design is necessary to understand the flow across several system objects. A low-level design is required for creating the configurations and troubleshooting inputs. 10. Input Criteria The input measure in high-level design is SRS (Software Requirement Specification). The input measure in low-level design is the reviewed HLD (High- Level Design). 11. Output Criteria The output measures in the HLD are functional design, database design, and review record. The output bases in the low-level design are the unit test plan and program specification. Conclusion In this section, we have understood the major difference between high-level and low-level designs. And we can conclude that the high-level design specifies the complete report and planning of the particular software product or application. On the other hand, the low-level design specifies the in-detail report of all the modules. In Software Development Life Cycle's design phase, the members of design team, client team, and review teams are included in high-level designing. On the other hand, the design team and operation teams will prepare the low-level Design. Finally, we can say that both HLD and LLD are essential part of design phase in the SDLC process for any software product. Next TopicBRS vs SRS ? prev next ? For Videos Join Our Youtube Channel: Join Now Help Others, Please Share Learn Latest Tutorials SoapUI RPA Manual T. Cucumber Appium PostgreSQL Solr MongoDB Gimp Verilog Teradata PhoneGap Preparation Aptitude Reasoning Verbal A. Interview Company Trending Technologies AI AWS Selenium Cloud Hadoop ReactJS D. Science Angular 7 Blockchain Git ML DevOps B.Tech / MCA DBMS DS DAA OS C. Network Compiler D. COA D. Math. E. Hacking C. Graphics Software E. Web Tech. Cyber Sec. Automata C C++ Java .Net Python Programs Control S. Data Mining Javatpoint Services JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
