https://www.javatpoint.com/automorphic-number-program-in-java
Automorphic Number Program in Java - Javatpoint
Automorphic Number Program in Java - Javatpoint ? Home Java Programs OOPs String Regex Exception Multithreading Collections JDBC Swing JavaFX Servlet JSP Spring Spring Boot Projects Interview Questions Java Training Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Automorphic Number Program in Java In this section, we will learn automorphic numbers with examples and also create Java programs that check whether the number is automorphic or not. What is an automorphic number? A number is called an automorphic number if and only if the square of the given number ends with the same number itself. For example, 25, 76 are automorphic numbers because their square is 625 and 5776, respectively and the last two digits of the square represent the number itself. Some other automorphic numbers are 5, 6, 36, 890625, etc. How to find automorphic number? Follow the steps given below: Read a number (num) from the user. Find the square of the given number and store it in a variable (square). Find the last digit(s) of the square. Compare the last digit(s) of the variable with num. If they are not equal, the given number is not an automorphic number. If they are the same, go to the next step. Remove the last digit of the given number i.e. num. Repeat steps 4 to 6 until the given number becomes 0. Java Automorphic Number Program AutomorphicNumberExample1.java 
public class AutomorphicNumberExample1
{ 
//user-defined static method that checks whether the number is automorphic or not 
static boolean isAutomorphic(int num) 
{ 
//determines the square of the specified number
int square = num * num; 
//comparing the digits until the number becomes 0
while (num > 0) 
{ 
//find the remainder (last digit) of the variable num and square and comparing them
if (num % 10 != square % 10) 
//returns false if digits are not equal
return false; 
//reduce num and square by dividing them by 10
num = num/10; 
square = square/10; 
} 
return true; 
} 
//Driver code
public static void main(String args[]) 
{ 
//number to be check    
//calling the method and prints the result accordingly
System.out.println(isAutomorphic(76) ? "Automorphic" : "Not Automorphic"); 
System.out.println(isAutomorphic(13) ? "Automorphic" : "Not Automorphic"); 
} 
}
 Output 1: 
Automorphic
Not Automorphic
 Let's see another logic to check the number is automorphic or not. AutomorphicNumberExample2.java 
import java.util.Scanner;
public class AutomorphicNumberExample2
{
public static void main(String args[])
{
Scanner in = new Scanner(System.in);
System.out.print("Enter a number to check: ");
//reading a number from the user
int num = in.nextInt();
int count=0;
//determines the square of the given number
int square = num*num;
//copying the variable num into temp
int temp = num;  
//iterate over the variable num until the condition become false
while(temp>0)
{
count++;
//removes last digit of the variable num
temp=temp/10;
} 
//determines the last digit of the variable square
int lastDigit = (int) (square%(Math.pow(10, count))); 
//compare num with last digit of the variable square
if(num == lastDigit)
System.out.println(num+ " is an automorphic number.");
else
System.out.println(num+ " is not an automorphic number.");
}
}
 Output 1: 
Enter a number to check: 625
625 is an automorphic number.
 Output 2: 
Enter a number to check: 312
312 is not an automorphic number.
 Let's create a Java program that determines all the automorphic numbers within a specified range. AutomorphicNumberExample3.java 
import java.util.Scanner;
public class AutomorphicNumberExample3 
{
//user-defined static method that checks whether the number is automorphic or not
private static boolean isAutomorphic(int num) 
{
int count=0;
//determines the square of the given number
int square = num*num;
//copying the variable num into temp
int temp = num;  
//iterate over the variable num until the condition become false
while(temp>0)
{
count++;
//removes last digit of the variable num
temp=temp/10;
} 
//determines the last digit of the variable square
int lastDigit = (int) (square%(Math.pow(10, count))); 
//compare the last digit with num
return num == lastDigit;
}
public static void main(String args[])
{
Scanner in = new Scanner(System.in); 
int start, end;
System.out.print("Enter the starting value: ");
start = in.nextInt();
System.out.print("Enter the ending value: ");
end = in.nextInt();
System.out.println("Automorphic numbers between "+start+" and "+end+" are: ");
//the for loop starts from the starting value and execute until the condition becomes false
for(int i=start; i<=end; i++)
{
//calling the user-defined method    
if(isAutomorphic(i))
//prints the number if it is automorphic
System.out.print(i+" ");
}
}
}
 Output: 
Enter the starting value: 1
Enter the ending value: 10000
Automorphic numbers between 1 and 10000 are: 
1 5 6 25 76 376 625 9376
 Next TopicJava Atomic ? prev next ? For Videos Join Our Youtube Channel: Join Now Help Others, Please Share Learn Latest Tutorials SoapUI RPA Manual T. Cucumber Appium PostgreSQL Solr MongoDB Gimp Verilog Teradata PhoneGap Preparation Aptitude Reasoning Verbal A. Interview Company Trending Technologies AI AWS Selenium Cloud Hadoop ReactJS D. Science Angular 7 Blockchain Git ML DevOps B.Tech / MCA DBMS DS DAA OS C. Network Compiler D. COA D. Math. E. Hacking C. Graphics Software E. Web Tech. Cyber Sec. Automata C C++ Java .Net Python Programs Control S. Data Mining Javatpoint Services JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com. Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
